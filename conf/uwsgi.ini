[uwsgi]
; https://www.bloomberg.com/company/stories/configuring-uwsgi-production-deployment/
;##################################
strict = true 						; Fail to start if any parameter in the configuration file isn’t explicitly understood by uWSGI
master = true 						; Enable master
enable-threads = true 				; uWSGI disables Python threads
vacuum = true 						; Delete sockets during shutdown
single-interpreter = true 			; By default, uWSGI starts in multiple interpreter mode, which allows multiple services to be hosted in each worker process
die-on-term = true 					; Shutdown when receiving SIGTERM (default is respawn)
need-app = true 					; Prevents uWSGI from starting if it is unable to find or load your application module
;##################################

; Worker recycling can prevent issues that become apparent over time such as memory leaks or unintentional states. 
;##################################
max-requests = 1000  				; Restart workers after this many requests
max-worker-lifetime = 3600 			; Restart workers after this many seconds (1h)
reload-on-rss = 2048  				; Restart workers after this much resident memory (2GB)
worker-reload-mercy = 60 			; How long to wait before forcefully killing workers
;##################################

;When uWSGI’s cheaper subsystem is enabled, the master process will spawn workers in response to traffic increases 
;and gradually shut workers down as traffic subsides.
;##################################
cheaper-algo = busyness              
processes = 32                       ; Maximum number of workers allowed
cheaper = 4                          ; Minimum number of workers allowed
cheaper-initial = 4                  ; Workers created at startup
cheaper-overload = 1                 ; Length of a cycle in seconds
cheaper-step = 4                     ; How many workers to spawn at a time

cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
cheaper-busyness-backlog-alert = 4   ; Spawn emergency workers if more than this many requests are waiting in the queue
cheaper-busyness-backlog-step = 2    ; How many emergegency workers to create if there are too many requests in the queue
;##################################

module = wsgi:app
http=127.0.0.1:5000
chmod-socket=664
uid=www-data
gid=www-data